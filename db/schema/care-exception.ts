/**
 * Care Exception table schema (MVP)
 *
 * Tracks exceptions raised when a patient does not meet thresholds or actions
 * in a care plan (e.g., missed BP readings, symptom alerts). Escalations are
 * identifiers generated by AI (not a user action) and imply high severity.
 */

import { relations, sql } from "drizzle-orm";
import { boolean, pgTable, text, timestamp } from "drizzle-orm/pg-core";
import { patient } from "./patient";

export const careException = pgTable("care_exception", {
  // Primary key (UUIDv7)
  id: text("id").primaryKey().default(sql`uuid_generate_v7()`),

  // Foreign keys
  patientId: text("patient_id")
    .notNull()
    .references(() => patient.patId, { onDelete: "cascade" }),

  // Exception metadata
  type: text("type").notNull(), // e.g., "bp_noncompliance", "questionnaire_missed"
  severity: text("severity")
    .notNull()
    .default("medium"), // one of: low | medium | high (validated in API)
  status: text("status")
    .notNull()
    .default("open"), // one of: open | acknowledged | in_progress | resolved | dismissed

  // Timing details
  firstDetectedAt: timestamp("first_detected_at", { withTimezone: true, mode: "date" }),
  lastDetectedAt: timestamp("last_detected_at", { withTimezone: true, mode: "date" }),
  resolvedAt: timestamp("resolved_at", { withTimezone: true, mode: "date" }),

  // Escalation identifiers (AI-generated or human in future)
  escalated: boolean("escalated").notNull().default(false),
  escalatedAt: timestamp("escalated_at", { withTimezone: true, mode: "date" }),
  escalatedByType: text("escalated_by_type"), // one of: agent | human
  escalatedByAgent: text("escalated_by_agent").default("compliance"), // agent key e.g., compliance, patient_engagement
  escalationReason: text("escalation_reason"),

  // Freeform note/comment
  note: text("note"),

  // Audit fields
  createdAt: timestamp("created_at", { withTimezone: true, mode: "date" })
    .defaultNow()
    .notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true, mode: "date" })
    .defaultNow()
    .$onUpdate(() => new Date())
    .notNull(),
});

export const careExceptionRelations = relations(careException, ({ one }) => ({
  patient: one(patient, {
    fields: [careException.patientId],
    references: [patient.patId],
  }),
}));

export type CareException = typeof careException.$inferSelect;
export type NewCareException = typeof careException.$inferInsert;